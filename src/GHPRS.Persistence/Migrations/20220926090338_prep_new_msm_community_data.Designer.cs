// <auto-generated />
using System;
using GHPRS.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GHPRS.Persistence.Migrations
{
    [DbContext(typeof(GhprsContext))]
    [Migration("20220926090338_prep_new_msm_community_data")]
    partial class prep_new_msm_community_data
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GHPRS.Core.Entities.Column", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("WorkSheetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkSheetId");

                    b.ToTable("Columns");
                });

            modelBuilder.Entity("GHPRS.Core.Entities.CommunityData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Agency")
                        .HasColumnType("text")
                        .HasColumnName("Agency");

                    b.Property<string>("CLIENT_A_TX_CURR")
                        .HasColumnType("text")
                        .HasColumnName("CLIENT_A_TX_CURR");

                    b.Property<string>("CLIENT_A_TX_NEW")
                        .HasColumnType("text")
                        .HasColumnName("CLIENT_A_TX_NEW");

                    b.Property<string>("CONTACT_A")
                        .HasColumnType("text")
                        .HasColumnName("CONTACT_A");

                    b.Property<string>("CONTACT_PEDS")
                        .HasColumnType("text")
                        .HasColumnName("CONTACT_PEDS");

                    b.Property<string>("CTC_CHILD")
                        .HasColumnType("text")
                        .HasColumnName("CTC_CHILD");

                    b.Property<string>("CTC_F_A")
                        .HasColumnType("text")
                        .HasColumnName("CTC_F_A");

                    b.Property<string>("CTC_F_P")
                        .HasColumnType("text")
                        .HasColumnName("CTC_F_P");

                    b.Property<string>("CTC_M_A")
                        .HasColumnType("text")
                        .HasColumnName("CTC_M_A");

                    b.Property<string>("CTC_M_P")
                        .HasColumnType("text")
                        .HasColumnName("CTC_M_P");

                    b.Property<string>("CTC_PWID")
                        .HasColumnType("text")
                        .HasColumnName("CTC_PWID");

                    b.Property<string>("CTC_SEX")
                        .HasColumnType("text")
                        .HasColumnName("CTC_SEX");

                    b.Property<string>("Council")
                        .HasColumnType("text")
                        .HasColumnName("Council");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("District")
                        .HasColumnType("text")
                        .HasColumnName("District");

                    b.Property<string>("HTS_F_A")
                        .HasColumnType("text")
                        .HasColumnName("HTS_F_A");

                    b.Property<string>("HTS_F_P")
                        .HasColumnType("text")
                        .HasColumnName("HTS_F_P");

                    b.Property<string>("HTS_M_A")
                        .HasColumnType("text")
                        .HasColumnName("HTS_M_A");

                    b.Property<string>("HTS_M_P")
                        .HasColumnType("text")
                        .HasColumnName("HTS_M_P");

                    b.Property<string>("HTS_Mobile_ADULTS")
                        .HasColumnType("text")
                        .HasColumnName("HTS_Mobile_ADULTS");

                    b.Property<string>("HTS_Mobile_PEDS")
                        .HasColumnType("text")
                        .HasColumnName("HTS_Mobile_PEDS");

                    b.Property<string>("HTS_PWID")
                        .HasColumnType("text")
                        .HasColumnName("HTS_PWID");

                    b.Property<string>("HTS_SNS_Female_15")
                        .HasColumnType("text")
                        .HasColumnName("HTS_SNS_Female<15");

                    b.Property<string>("HTS_SNS_Female_15_Plus")
                        .HasColumnType("text")
                        .HasColumnName("HTS_SNS_Female 15+");

                    b.Property<string>("HTS_SNS_Male_15")
                        .HasColumnType("text")
                        .HasColumnName("HTS_SNS_Male<15");

                    b.Property<string>("HTS_SNS_Male_15_plus")
                        .HasColumnType("text")
                        .HasColumnName("HTS_SNS_Male 15+");

                    b.Property<string>("IPV_HX_SCREEN")
                        .HasColumnType("text")
                        .HasColumnName("IPV_HX_SCREEN");

                    b.Property<string>("KNOWN_POS_A")
                        .HasColumnType("text")
                        .HasColumnName("KNOWN_POS_A");

                    b.Property<string>("KNOWN_POS_PEDS")
                        .HasColumnType("text")
                        .HasColumnName("KNOWN_POS_PEDS");

                    b.Property<string>("LFTU")
                        .HasColumnType("text")
                        .HasColumnName("LFTU");

                    b.Property<string>("L_CTC")
                        .HasColumnType("text")
                        .HasColumnName("L_CTC");

                    b.Property<string>("L_DXD")
                        .HasColumnType("text")
                        .HasColumnName("L_DXD");

                    b.Property<string>("L_NOATTMPT")
                        .HasColumnType("text")
                        .HasColumnName("L_NOATTMPT");

                    b.Property<string>("L_REFX")
                        .HasColumnType("text")
                        .HasColumnName("L_REFX");

                    b.Property<string>("L_RTX")
                        .HasColumnType("text")
                        .HasColumnName("L_RTX");

                    b.Property<string>("L_SELF_REF")
                        .HasColumnType("text")
                        .HasColumnName("L_SELF_REF");

                    b.Property<string>("L_UNBL")
                        .HasColumnType("text")
                        .HasColumnName("L_UNBL");

                    b.Property<string>("L_WRNGD")
                        .HasColumnType("text")
                        .HasColumnName("L_WRNGD");

                    b.Property<string>("Month")
                        .HasColumnType("text")
                        .HasColumnName("Month");

                    b.Property<string>("NEG_A")
                        .HasColumnType("text")
                        .HasColumnName("NEG_A");

                    b.Property<string>("NEG_PEDS")
                        .HasColumnType("text")
                        .HasColumnName("NEG_PEDS");

                    b.Property<string>("POS_A")
                        .HasColumnType("text")
                        .HasColumnName("POS_A");

                    b.Property<string>("POS_F_A")
                        .HasColumnType("text")
                        .HasColumnName("POS_F_A");

                    b.Property<string>("POS_F_P")
                        .HasColumnType("text")
                        .HasColumnName("POS_F_P");

                    b.Property<string>("POS_M_A")
                        .HasColumnType("text")
                        .HasColumnName("POS_M_A");

                    b.Property<string>("POS_M_P")
                        .HasColumnType("text")
                        .HasColumnName("POS_M_P");

                    b.Property<string>("POS_Mobile_ADULTS")
                        .HasColumnType("text")
                        .HasColumnName("POS_Mobile_ADULTS");

                    b.Property<string>("POS_Mobile_PEDS")
                        .HasColumnType("text")
                        .HasColumnName("POS_Mobile_PEDS");

                    b.Property<string>("POS_PEDS")
                        .HasColumnType("text")
                        .HasColumnName("POS_PEDS");

                    b.Property<string>("POS_PWID")
                        .HasColumnType("text")
                        .HasColumnName("POS_PWID");

                    b.Property<string>("POS_SNS_Female_15")
                        .HasColumnType("text")
                        .HasColumnName("POS_SNS_Female<15");

                    b.Property<string>("POS_SNS_Female_15_Plus")
                        .HasColumnType("text")
                        .HasColumnName("POS_SNS_Female 15+");

                    b.Property<string>("POS_SNS_Male_15")
                        .HasColumnType("text")
                        .HasColumnName("POS_SNS_Male<15");

                    b.Property<string>("POS_SNS_Male_15_Plus")
                        .HasColumnType("text")
                        .HasColumnName("POS_SNS_Male 15+");

                    b.Property<string>("Partner")
                        .HasColumnType("text")
                        .HasColumnName("Partner");

                    b.Property<string>("PrEP_CT_AGYW")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_CT-AGYW");

                    b.Property<string>("PrEP_CT_FSW")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_CT-FSW");

                    b.Property<string>("PrEP_CT_MSM")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_CT-MSM");

                    b.Property<string>("PrEP_CT_PWID")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_CT-PWID");

                    b.Property<string>("PrEP_CT_Pregnant_Breastfeeding_Women")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_CT-Pregnant& Breastfeeding Women");

                    b.Property<string>("PrEP_CT_Serodiscordant_Couple")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_CT-Serodiscordant Couple");

                    b.Property<string>("PrEP_CT_TG")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_CT-TG");

                    b.Property<string>("PrEP_Eligible_AGY_15_19")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Eligible-AGY(15-19)");

                    b.Property<string>("PrEP_Eligible_AGY_20_24")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Eligible-AGY(20-24)");

                    b.Property<string>("PrEP_Eligible_FSW")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Eligible_FSW");

                    b.Property<string>("PrEP_Eligible_MSM")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Eligible-MSM");

                    b.Property<string>("PrEP_Eligible_PWID")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Eligible-PWID");

                    b.Property<string>("PrEP_Eligible_Pregnant_Breastfeeding_Women")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Eligible-Pregnant& Breastfeeding Women");

                    b.Property<string>("PrEP_Eligible_Serodiscordant_Couple")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Eligible-Serodiscordant Couple");

                    b.Property<string>("PrEP_Eligible_TG")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Eligible-TG");

                    b.Property<string>("PrEP_NEW_AGYW_15_19")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_NEW-AGYW(15-19)");

                    b.Property<string>("PrEP_NEW_AGYW_20_24")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_NEW-AGYW(20-24)");

                    b.Property<string>("PrEP_NEW_FSW")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_NEW-FSW");

                    b.Property<string>("PrEP_NEW_MSM")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_NEW-MSM");

                    b.Property<string>("PrEP_NEW_PWID")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_NEW-PWID");

                    b.Property<string>("PrEP_NEW_Pregnant_Breastfeeding_Women")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_NEW-Pregnant& Breastfeeding Women");

                    b.Property<string>("PrEP_NEW_Serodiscordant_Couple")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_NEW-Serodiscordant Couple");

                    b.Property<string>("PrEP_NEW_TG")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_NEW-TG");

                    b.Property<string>("PrEP_Screen_AGY_15_19")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Screen-AGY(15-19)");

                    b.Property<string>("PrEP_Screen_FSW")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Screen_FSW");

                    b.Property<string>("PrEP_Screen_MSM")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Screen-MSM");

                    b.Property<string>("PrEP_Screen_PWID")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Screen-PWID");

                    b.Property<string>("PrEP_Screen_Pregnant_Breastfeeding_Women")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Screen-Pregnant& Breastfeeding Women");

                    b.Property<string>("PrEP_Screen_Serodiscordant_Couple")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Screen-Serodiscordant Couple");

                    b.Property<string>("PrEP_Screen_TG")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Screen-TG");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasColumnName("Region");

                    b.Property<string>("Report_Date")
                        .HasColumnType("text")
                        .HasColumnName("Report Date");

                    b.Property<string>("SCREEN_ELIG_F")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_ELIG_F");

                    b.Property<string>("SCREEN_ELIG_M")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_ELIG_M");

                    b.Property<string>("SCREEN_ELIG_PEDS")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_ELIG_PEDS");

                    b.Property<string>("SCREEN_F")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_F");

                    b.Property<string>("SCREEN_HTS_F")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_HTS_F");

                    b.Property<string>("SCREEN_HTS_M")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_HTS_M");

                    b.Property<string>("SCREEN_HTS_PEDS")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_HTS_PEDS");

                    b.Property<string>("SCREEN_HTS_POS_F")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_HTS_POS_F");

                    b.Property<string>("SCREEN_HTS_POS_M")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_HTS_POS_M");

                    b.Property<string>("SCREEN_HTS_POS_PEDS")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_HTS_POS_PEDS");

                    b.Property<string>("SCREEN_M")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_M");

                    b.Property<string>("SCREEN_PEDS")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_PEDS");

                    b.Property<string>("SiteId")
                        .HasColumnType("text")
                        .HasColumnName("Site ID/ ward ID (from DATIM)");

                    b.Property<string>("TX_NEW_CHILD")
                        .HasColumnType("text")
                        .HasColumnName("TX_NEW_CHILD");

                    b.Property<string>("TX_NEW_PWID")
                        .HasColumnType("text")
                        .HasColumnName("TX_NEW_PWID");

                    b.Property<string>("TX_NEW_SEX")
                        .HasColumnType("text")
                        .HasColumnName("TX_NEW_SEX");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UploadBatchGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Upload_Batch")
                        .HasColumnType("text");

                    b.Property<string>("Ward")
                        .HasColumnType("text")
                        .HasColumnName("Ward");

                    b.Property<string>("Year")
                        .HasColumnType("text")
                        .HasColumnName("Year");

                    b.HasKey("Id");

                    b.ToTable("StagingCommunityData");
                });

            modelBuilder.Entity("GHPRS.Core.Entities.FacilityData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Agency")
                        .HasColumnType("text")
                        .HasColumnName("Agency");

                    b.Property<string>("CLIENT_A_TX_CURR")
                        .HasColumnType("text")
                        .HasColumnName("CLIENT_A_TX_CURR");

                    b.Property<string>("CLIENT_A_TX_NEW")
                        .HasColumnType("text")
                        .HasColumnName("CLIENT_A_TX_NEW");

                    b.Property<string>("CONTACT_A")
                        .HasColumnType("text")
                        .HasColumnName("CONTACT_A");

                    b.Property<string>("CONTACT_PEDS")
                        .HasColumnType("text")
                        .HasColumnName("CONTACT_PEDS");

                    b.Property<string>("Council")
                        .HasColumnType("text")
                        .HasColumnName("Council");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("District")
                        .HasColumnType("text")
                        .HasColumnName("District");

                    b.Property<string>("HTS_2_months")
                        .HasColumnType("text")
                        .HasColumnName("HTS_2 months");

                    b.Property<string>("HTS_F_A")
                        .HasColumnType("text")
                        .HasColumnName("HTS_F_A");

                    b.Property<string>("HTS_F_P")
                        .HasColumnType("text")
                        .HasColumnName("HTS_F_P");

                    b.Property<string>("HTS_M_A")
                        .HasColumnType("text")
                        .HasColumnName("HTS_M_A");

                    b.Property<string>("HTS_M_P")
                        .HasColumnType("text")
                        .HasColumnName("HTS_M_P");

                    b.Property<string>("IPV_HX_SCREEN")
                        .HasColumnType("text")
                        .HasColumnName("IPV_HX_SCREEN");

                    b.Property<string>("KNOWN_POS_A")
                        .HasColumnType("text")
                        .HasColumnName("KNOWN_POS_A");

                    b.Property<string>("KNOWN_POS_PEDS")
                        .HasColumnType("text")
                        .HasColumnName("KNOWN_POS_PEDS");

                    b.Property<string>("LCM_A")
                        .HasColumnType("text")
                        .HasColumnName("LCM_A");

                    b.Property<string>("LFTU_A")
                        .HasColumnType("text")
                        .HasColumnName("LFTU_A");

                    b.Property<string>("LFTU_P")
                        .HasColumnType("text")
                        .HasColumnName("LFTU_P");

                    b.Property<string>("L_CTC_A")
                        .HasColumnType("text")
                        .HasColumnName("L_CTC_A");

                    b.Property<string>("L_CTC_P")
                        .HasColumnType("text")
                        .HasColumnName("L_CTC_P");

                    b.Property<string>("L_DXD_A")
                        .HasColumnType("text")
                        .HasColumnName("L_DXD_A");

                    b.Property<string>("L_DXD_P")
                        .HasColumnType("text")
                        .HasColumnName("L_DXD_P");

                    b.Property<string>("L_NOATTMPT_A")
                        .HasColumnType("text")
                        .HasColumnName("L_NOATTMPT_A");

                    b.Property<string>("L_NOATTMPT_P")
                        .HasColumnType("text")
                        .HasColumnName("L_NOATTMPT_P");

                    b.Property<string>("L_REFX_A")
                        .HasColumnType("text")
                        .HasColumnName("L_REFX_A");

                    b.Property<string>("L_REFX_P")
                        .HasColumnType("text")
                        .HasColumnName("L_REFX_P");

                    b.Property<string>("L_RTX_A")
                        .HasColumnType("text")
                        .HasColumnName("L_RTX_A");

                    b.Property<string>("L_RTX_P")
                        .HasColumnType("text")
                        .HasColumnName("L_RTX_P");

                    b.Property<string>("L_SELF_REF_A")
                        .HasColumnType("text")
                        .HasColumnName("L_SELF_REF_A");

                    b.Property<string>("L_SELF_REF_P")
                        .HasColumnType("text")
                        .HasColumnName("L_SELF_REF_P");

                    b.Property<string>("L_UNBL_A")
                        .HasColumnType("text")
                        .HasColumnName("L_UNBL_A");

                    b.Property<string>("L_UNBL_P")
                        .HasColumnType("text")
                        .HasColumnName("L_UNBL_P");

                    b.Property<string>("L_WRNGD_A")
                        .HasColumnType("text")
                        .HasColumnName("L_WRNGD_A");

                    b.Property<string>("L_WRNGD_P")
                        .HasColumnType("text")
                        .HasColumnName("L_WRNGD_P");

                    b.Property<string>("MECHANISM_ID")
                        .HasColumnType("text")
                        .HasColumnName("MECHANISM ID");

                    b.Property<string>("MMS_6_ELIG_A_F")
                        .HasColumnType("text")
                        .HasColumnName("MMS_6_ELIG_A_F");

                    b.Property<string>("MMS_6_ELIG_A_M")
                        .HasColumnType("text")
                        .HasColumnName("MMS_6_ELIG_A_M");

                    b.Property<string>("MMS_6_ELIG_P_M")
                        .HasColumnType("text")
                        .HasColumnName("MMS_6_ELIG_P_M");

                    b.Property<string>("MMS_6__ELIG_P_F")
                        .HasColumnType("text")
                        .HasColumnName("MMS_6__ELIG_P_F");

                    b.Property<string>("Miss_App")
                        .HasColumnType("text")
                        .HasColumnName("Miss_App");

                    b.Property<string>("Month")
                        .HasColumnType("text")
                        .HasColumnName("Month");

                    b.Property<string>("NEG_A")
                        .HasColumnType("text")
                        .HasColumnName("NEG_A");

                    b.Property<string>("NEG_PEDS")
                        .HasColumnType("text")
                        .HasColumnName("NEG_PEDS");

                    b.Property<string>("OPD_A")
                        .HasColumnType("text")
                        .HasColumnName("OPD_A");

                    b.Property<string>("OPD_P")
                        .HasColumnType("text")
                        .HasColumnName("OPD_P");

                    b.Property<string>("PMTCT_ART")
                        .HasColumnType("text")
                        .HasColumnName("PMTCT_ART");

                    b.Property<string>("PMTCT_EID")
                        .HasColumnType("text")
                        .HasColumnName("PMTCT_EID");

                    b.Property<string>("PMTCT_HEI_POS")
                        .HasColumnType("text")
                        .HasColumnName("PMTCT_HEI_POS");

                    b.Property<string>("PMTCT_HEI_POS_ART")
                        .HasColumnType("text")
                        .HasColumnName("PMTCT_HEI_POS_ART");

                    b.Property<string>("PMTCT_STAT_D")
                        .HasColumnType("text")
                        .HasColumnName("PMTCT_STAT_D");

                    b.Property<string>("PMTCT_STAT_N")
                        .HasColumnType("text")
                        .HasColumnName("PMTCT_STAT_N");

                    b.Property<string>("POS_A")
                        .HasColumnType("text")
                        .HasColumnName("POS_A");

                    b.Property<string>("POS_F_A")
                        .HasColumnType("text")
                        .HasColumnName("POS_F_A");

                    b.Property<string>("POS_F_P")
                        .HasColumnType("text")
                        .HasColumnName("POS_F_P");

                    b.Property<string>("POS_M_A")
                        .HasColumnType("text")
                        .HasColumnName("POS_M_A");

                    b.Property<string>("POS_M_P")
                        .HasColumnType("text")
                        .HasColumnName("POS_M_P");

                    b.Property<string>("POS_PEDS")
                        .HasColumnType("text")
                        .HasColumnName("POS_PEDS");

                    b.Property<string>("POS_preg")
                        .HasColumnType("text")
                        .HasColumnName("POS_preg");

                    b.Property<string>("Partner")
                        .HasColumnType("text")
                        .HasColumnName("Partner");

                    b.Property<string>("PrEP_CT_AGYW")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_CT-AGYW");

                    b.Property<string>("PrEP_CT_FSW")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_CT-FSW");

                    b.Property<string>("PrEP_CT_MSM")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_CT-MSM");

                    b.Property<string>("PrEP_CT_PWID")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_CT-PWID");

                    b.Property<string>("PrEP_CT_Pregnant_Breastfeeding_Women")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_CT-Pregnant& Breastfeeding Women");

                    b.Property<string>("PrEP_CT_Serodiscordant_Couple")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_CT-Serodiscordant Couple");

                    b.Property<string>("PrEP_CT_TG")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_CT-TG");

                    b.Property<string>("PrEP_Eligible_AGY_15_19")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Eligible-AGY(15-19)");

                    b.Property<string>("PrEP_Eligible_AGY_20_24")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Eligible-AGY(20-24)");

                    b.Property<string>("PrEP_Eligible_FSW")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Eligible_FSW");

                    b.Property<string>("PrEP_Eligible_MSM")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Eligible-MSM");

                    b.Property<string>("PrEP_Eligible_PWID")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Eligible-PWID");

                    b.Property<string>("PrEP_Eligible_Pregnant_Breastfeeding_Women")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Eligible-Pregnant& Breastfeeding Women");

                    b.Property<string>("PrEP_Eligible_Serodiscordant_Couple")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Eligible-Serodiscordant Couple");

                    b.Property<string>("PrEP_Eligible_TG")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Eligible-TG");

                    b.Property<string>("PrEP_NEW_AGYW_15_19")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_NEW-AGYW(15-19)");

                    b.Property<string>("PrEP_NEW_AGYW_20_24")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_NEW-AGYW(20-24)");

                    b.Property<string>("PrEP_NEW_FSW")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_NEW-FSW");

                    b.Property<string>("PrEP_NEW_MSM")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_NEW-MSM");

                    b.Property<string>("PrEP_NEW_PWID")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_NEW-PWID");

                    b.Property<string>("PrEP_NEW_Pregnant_Breastfeeding_Women")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_NEW-Pregnant& Breastfeeding Women");

                    b.Property<string>("PrEP_NEW_Serodiscordant_Couple")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_NEW-Serodiscordant Couple");

                    b.Property<string>("PrEP_NEW_TG")
                        .HasColumnType("text")
                        .HasColumnName("PrEP_NEW-TG");

                    b.Property<string>("PrEP_Screen_AGY_15_19")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Screen-AGY(15-19)");

                    b.Property<string>("PrEP_Screen_AGY_20_24")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Screen-AGY(20-24)");

                    b.Property<string>("PrEP_Screen_FSW")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Screen_FSW");

                    b.Property<string>("PrEP_Screen_MSM")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Screen-MSM");

                    b.Property<string>("PrEP_Screen_PWID")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Screen-PWID");

                    b.Property<string>("PrEP_Screen_Pregnant_Breastfeeding_Women")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Screen-Pregnant& Breastfeeding Women");

                    b.Property<string>("PrEP_Screen_Serodiscordant_Couple")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Screen-Serodiscordant Couple");

                    b.Property<string>("PrEP_Screen_TG")
                        .HasColumnType("text")
                        .HasColumnName("PrEP Screen-TG");

                    b.Property<string>("Priority_Tier")
                        .HasColumnType("text")
                        .HasColumnName("Priority Tier (1, 2, 3, 4)");

                    b.Property<string>("REFILL")
                        .HasColumnType("text")
                        .HasColumnName("REFILL");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasColumnName("Region");

                    b.Property<string>("Report_Date")
                        .HasColumnType("text")
                        .HasColumnName("Report Date");

                    b.Property<string>("SCREEN_A")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_A");

                    b.Property<string>("SCREEN_ELIG_A")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_ELIG_A");

                    b.Property<string>("SCREEN_ELIG_P")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_ELIG_P");

                    b.Property<string>("SCREEN_HTS_A")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_HTS_A");

                    b.Property<string>("SCREEN_HTS_P")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_HTS_P");

                    b.Property<string>("SCREEN_HTS_POS_A")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_HTS_POS_A");

                    b.Property<string>("SCREEN_HTS_POS_P")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_HTS_POS_P");

                    b.Property<string>("SCREEN_P")
                        .HasColumnType("text")
                        .HasColumnName("SCREEN_P");

                    b.Property<string>("Site_Name")
                        .HasColumnType("text")
                        .HasColumnName("Site Name");

                    b.Property<string>("Site_id")
                        .HasColumnType("text")
                        .HasColumnName("Site ID (from DATIM)");

                    b.Property<string>("TB_ART")
                        .HasColumnType("text")
                        .HasColumnName("TB_ART");

                    b.Property<string>("TB_PREV_D")
                        .HasColumnType("text")
                        .HasColumnName("TB_PREV_D");

                    b.Property<string>("TB_PREV_N")
                        .HasColumnType("text")
                        .HasColumnName("TB_PREV_N");

                    b.Property<string>("TB_PREV_NEW")
                        .HasColumnType("text")
                        .HasColumnName("TB_PREV_NEW");

                    b.Property<string>("TB_STAT_D")
                        .HasColumnType("text")
                        .HasColumnName("TB_STAT_D");

                    b.Property<string>("TB_STAT_N")
                        .HasColumnType("text")
                        .HasColumnName("TB_STAT_N");

                    b.Property<string>("TB_STAT_POS")
                        .HasColumnType("text")
                        .HasColumnName("TB_STAT_POS");

                    b.Property<string>("TX_CURR")
                        .HasColumnType("text")
                        .HasColumnName("TX_CURR");

                    b.Property<string>("TX_NEW_F_A")
                        .HasColumnType("text")
                        .HasColumnName("TX_NEW_F_A");

                    b.Property<string>("TX_NEW_F_P")
                        .HasColumnType("text")
                        .HasColumnName("TX_NEW_F_P");

                    b.Property<string>("TX_NEW_M_A")
                        .HasColumnType("text")
                        .HasColumnName("TX_NEW_M_A");

                    b.Property<string>("TX_NEW_M_P")
                        .HasColumnType("text")
                        .HasColumnName("TX_NEW_M_P");

                    b.Property<string>("TX_PREV")
                        .HasColumnType("text")
                        .HasColumnName("TX_PREV");

                    b.Property<string>("TX_TB_D")
                        .HasColumnType("text")
                        .HasColumnName("TX_TB_D");

                    b.Property<string>("TX_TB_N")
                        .HasColumnType("text")
                        .HasColumnName("TX_TB_N");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UploadBatchGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Upload_Batch")
                        .HasColumnType("text");

                    b.Property<string>("VL_D_A")
                        .HasColumnType("text")
                        .HasColumnName("VL_D_A");

                    b.Property<string>("VL_D_P")
                        .HasColumnType("text")
                        .HasColumnName("VL_D_P");

                    b.Property<string>("VL_ELIG_A")
                        .HasColumnType("text")
                        .HasColumnName("VL_ELIG _A");

                    b.Property<string>("VL_ELIG_P")
                        .HasColumnType("text")
                        .HasColumnName("VL_ELIG_P");

                    b.Property<string>("VL_N_A")
                        .HasColumnType("text")
                        .HasColumnName("VL_N_A");

                    b.Property<string>("VL_N_P")
                        .HasColumnType("text")
                        .HasColumnName("VL_N_P");

                    b.Property<string>("Ward")
                        .HasColumnType("text")
                        .HasColumnName("Ward");

                    b.Property<string>("XFER_DEATH")
                        .HasColumnType("text")
                        .HasColumnName("XFER_DEATH");

                    b.Property<string>("XFER_IN")
                        .HasColumnType("text")
                        .HasColumnName("XFER_IN");

                    b.Property<string>("XFER_OUT")
                        .HasColumnType("text")
                        .HasColumnName("XFER_OUT");

                    b.Property<string>("Year")
                        .HasColumnType("text")
                        .HasColumnName("Year");

                    b.Property<string>("tx_curr_o15_f")
                        .HasColumnType("text")
                        .HasColumnName("tx_curr.o15.f");

                    b.Property<string>("tx_curr_o15_m")
                        .HasColumnType("text")
                        .HasColumnName("tx_curr.o15.m");

                    b.Property<string>("tx_curr_u15_f")
                        .HasColumnType("text")
                        .HasColumnName("tx_curr.u15.f");

                    b.Property<string>("tx_curr_u15_m")
                        .HasColumnType("text")
                        .HasColumnName("tx_curr.u15.m");

                    b.Property<string>("tx_mmd_o15_f_35mo")
                        .HasColumnType("text")
                        .HasColumnName("tx_mmd.o15.f.35mo");

                    b.Property<string>("tx_mmd_o15_f_o6mo")
                        .HasColumnType("text")
                        .HasColumnName("tx_mmd.o15.f.o6mo");

                    b.Property<string>("tx_mmd_o15_f_u3mo")
                        .HasColumnType("text")
                        .HasColumnName("tx_mmd.o15.f.u3mo");

                    b.Property<string>("tx_mmd_o15_m_35mo")
                        .HasColumnType("text")
                        .HasColumnName("tx_mmd.o15.m.35mo");

                    b.Property<string>("tx_mmd_o15_m_o6mo")
                        .HasColumnType("text")
                        .HasColumnName("tx_mmd.o15.m.o6mo");

                    b.Property<string>("tx_mmd_o15_m_u3mo")
                        .HasColumnType("text")
                        .HasColumnName("tx_mmd.o15.m.u3mo");

                    b.Property<string>("tx_mmd_u15_f_35mo")
                        .HasColumnType("text")
                        .HasColumnName("tx_mmd.u15.f.35mo");

                    b.Property<string>("tx_mmd_u15_f_o6mo")
                        .HasColumnType("text")
                        .HasColumnName("tx_mmd.u15.f.o6mo");

                    b.Property<string>("tx_mmd_u15_f_u3mo")
                        .HasColumnType("text")
                        .HasColumnName("tx_mmd.u15.f.u3mo");

                    b.Property<string>("tx_mmd_u15_m_35mo")
                        .HasColumnType("text")
                        .HasColumnName("tx_mmd.u15.m.35mo");

                    b.Property<string>("tx_mmd_u15_m_o6mo")
                        .HasColumnType("text")
                        .HasColumnName("tx_mmd.u15.m.o6mo");

                    b.Property<string>("tx_mmd_u15_m_u3mo")
                        .HasColumnType("text")
                        .HasColumnName("tx_mmd.u15.m.u3mo");

                    b.Property<string>("vmmc_circ_o15_m")
                        .HasColumnType("text")
                        .HasColumnName("vmmc_circ.o15.m");

                    b.Property<string>("vmmc_circ_u15_m")
                        .HasColumnType("text")
                        .HasColumnName("vmmc_circ.u15.m");

                    b.HasKey("Id");

                    b.ToTable("StagingFacilityData");
                });

            modelBuilder.Entity("GHPRS.Core.Entities.FileUploads", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("File")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UploadType")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FileUploads");
                });

            modelBuilder.Entity("GHPRS.Core.Entities.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<int>("LinkType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Link");

                    b.HasData(
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Key = "",
                            LinkType = 3,
                            Name = "Document Manager",
                            Number = 0,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "/documents"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Key = "",
                            LinkType = 3,
                            Name = "DATIM",
                            Number = 0,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "https://www.datim.org/dhis"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Key = "",
                            LinkType = 3,
                            Name = "Panaroma Dashboard",
                            Number = 0,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "https://pepfar-panorama.org/"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Key = "",
                            LinkType = 3,
                            Name = "OHA Dashboard",
                            Number = 0,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "https://sites.google.com/a/usaid.gov/gh-oha/home/reports-resources/quarterly-reporting-guidance-and-resources"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Key = "",
                            LinkType = 3,
                            Name = "Partner Performance Report",
                            Number = 0,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "https://www.pepfar.net/OGAC-HQ/icpi/Products/Forms/AllItems.aspx"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Key = "",
                            LinkType = 3,
                            Name = "Monthly Portal",
                            Number = 0,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "http://hmis.reachproject.or.tz/MonthlyReporting/"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Key = "",
                            LinkType = 3,
                            Name = "IP Reporting System",
                            Number = 0,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "https://usaidtanzaniaiprs.com/index.cfm"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Key = "",
                            LinkType = 3,
                            Name = "STAT Compiler",
                            Number = 0,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "https://statcompiler.com/en/"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Key = "",
                            LinkType = 3,
                            Name = "UNICEF (MICS)",
                            Number = 0,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "https://data.unicef.org/"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Key = "",
                            LinkType = 3,
                            Name = "Global Health Data",
                            Number = 0,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "http://apps.who.int/gho/data/node.home"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Key = "",
                            LinkType = 3,
                            Name = "World Bank",
                            Number = 0,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "https://data.worldbank.org/"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Key = "",
                            LinkType = 3,
                            Name = "World Bank Service Delivery Indicators",
                            Number = 0,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "http://datatopics.worldbank.org/sdi/"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Key = "",
                            LinkType = 3,
                            Name = "WHO Global Health Observatory",
                            Number = 0,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "/Observatory"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Key = "80334b54cc4c696b67e0d20c2bc461b9d867781b4234af3819030209cbde6751",
                            LinkType = 0,
                            Name = "Pediatric ARV Optimization",
                            Number = 5,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "http://52.251.58.64:3000"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Key = "80334b54cc4c696b67e0d20c2bc461b9d867781b4234af3819030209cbde6751",
                            LinkType = 0,
                            Name = "D5 USAID Monthly Reporting",
                            Number = 12,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "http://52.251.58.64:3000"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Key = "80334b54cc4c696b67e0d20c2bc461b9d867781b4234af3819030209cbde6751",
                            LinkType = 0,
                            Name = "D5 USAID Monthly Reporting - Site Level",
                            Number = 13,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "http://52.251.58.64:3000"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Key = "80334b54cc4c696b67e0d20c2bc461b9d867781b4234af3819030209cbde6751",
                            LinkType = 0,
                            Name = "MCH FP Performance Dashboard",
                            Number = 14,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "http://52.251.58.64:3000"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Key = "80334b54cc4c696b67e0d20c2bc461b9d867781b4234af3819030209cbde6751",
                            LinkType = 0,
                            Name = "Boresha Afya Facilities",
                            Number = 36,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "http://52.251.58.64:3000"
                        });
                });

            modelBuilder.Entity("GHPRS.Core.Entities.Lookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LookupType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Lookups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupType = 0,
                            Name = "Male",
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupType = 0,
                            Name = "Female",
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupType = 1,
                            Name = "Single",
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupType = 1,
                            Name = "Married",
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupType = 1,
                            Name = "Divorced",
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupType = 1,
                            Name = "Widow",
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupType = 1,
                            Name = "Widower",
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupType = 2,
                            Name = "TEXT",
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "TEXT"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupType = 2,
                            Name = "DATE",
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "DATE"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupType = 2,
                            Name = "NUMBER",
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "NUMERIC"
                        });
                });

            modelBuilder.Entity("GHPRS.Core.Entities.MerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FileUploadsId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("age_2018")
                        .HasColumnType("text");

                    b.Property<string>("age_2019")
                        .HasColumnType("text");

                    b.Property<string>("ageasentered")
                        .HasColumnType("text");

                    b.Property<string>("award_number")
                        .HasColumnType("text");

                    b.Property<string>("categoryoptioncomboname")
                        .HasColumnType("text");

                    b.Property<string>("community")
                        .HasColumnType("text");

                    b.Property<string>("communityuid")
                        .HasColumnType("text");

                    b.Property<string>("country")
                        .HasColumnType("text");

                    b.Property<string>("cumulative")
                        .HasColumnType("text");

                    b.Property<string>("disaggregate")
                        .HasColumnType("text");

                    b.Property<string>("dreams")
                        .HasColumnType("text");

                    b.Property<string>("facility")
                        .HasColumnType("text");

                    b.Property<string>("facilityuid")
                        .HasColumnType("text");

                    b.Property<string>("fiscal_year")
                        .HasColumnType("text");

                    b.Property<string>("funding_agency")
                        .HasColumnType("text");

                    b.Property<string>("hiv_treatment_status")
                        .HasColumnType("text");

                    b.Property<string>("indicator")
                        .HasColumnType("text");

                    b.Property<string>("indicatortype")
                        .HasColumnType("text");

                    b.Property<string>("mech_code")
                        .HasColumnType("text");

                    b.Property<string>("mech_name")
                        .HasColumnType("text");

                    b.Property<string>("modality")
                        .HasColumnType("text");

                    b.Property<string>("numeratordenom")
                        .HasColumnType("text");

                    b.Property<string>("operatingunit")
                        .HasColumnType("text");

                    b.Property<string>("operatingunituid")
                        .HasColumnType("text");

                    b.Property<string>("orgunituid")
                        .HasColumnType("text");

                    b.Property<string>("otherdisaggregate")
                        .HasColumnType("text");

                    b.Property<string>("otherdisaggregate_sub")
                        .HasColumnType("text");

                    b.Property<string>("prime_partner_duns")
                        .HasColumnType("text");

                    b.Property<string>("prime_partner_name")
                        .HasColumnType("text");

                    b.Property<string>("prime_partner_uei")
                        .HasColumnType("text");

                    b.Property<string>("psnu")
                        .HasColumnType("text");

                    b.Property<string>("psnuuid")
                        .HasColumnType("text");

                    b.Property<string>("qtr1")
                        .HasColumnType("text");

                    b.Property<string>("qtr2")
                        .HasColumnType("text");

                    b.Property<string>("qtr3")
                        .HasColumnType("text");

                    b.Property<string>("qtr4")
                        .HasColumnType("text");

                    b.Property<string>("sex")
                        .HasColumnType("text");

                    b.Property<string>("sitename")
                        .HasColumnType("text");

                    b.Property<string>("sitetype")
                        .HasColumnType("text");

                    b.Property<string>("snu1")
                        .HasColumnType("text");

                    b.Property<string>("snu1uid")
                        .HasColumnType("text");

                    b.Property<string>("snuprioritization")
                        .HasColumnType("text");

                    b.Property<string>("source_name")
                        .HasColumnType("text");

                    b.Property<string>("standardizeddisaggregate")
                        .HasColumnType("text");

                    b.Property<string>("statuscx")
                        .HasColumnType("text");

                    b.Property<string>("statushiv")
                        .HasColumnType("text");

                    b.Property<string>("statustb")
                        .HasColumnType("text");

                    b.Property<string>("targets")
                        .HasColumnType("text");

                    b.Property<string>("trendscoarse")
                        .HasColumnType("text");

                    b.Property<string>("typemilitary")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FileUploadsId");

                    b.ToTable("StagingMerData");
                });

            modelBuilder.Entity("GHPRS.Core.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "USAID",
                            Name = "USAID",
                            ShortName = "USAID",
                            Status = 0,
                            UpdatedAt = new DateTime(2021, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("GHPRS.Core.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 120L, null, null, null, null, null);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<int>("MaritalStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("GHPRS.Core.Entities.TBData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bacteriological_Diagnosis_Coverage_Pulmonary_TB_0_14")
                        .HasColumnType("text")
                        .HasColumnName("Bacteriological Diagnosis Coverage (Pulmonary TB) 0 - 14");

                    b.Property<string>("Bacteriological_Diagnosis_Coverage_Pulmonary_TB_15Plus")
                        .HasColumnType("text")
                        .HasColumnName("Bacteriological Diagnosis Coverage (Pulmonary TB) 15+");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("District")
                        .HasColumnType("text")
                        .HasColumnName("District");

                    b.Property<string>("Facility_ID")
                        .HasColumnType("text")
                        .HasColumnName("Facility ID");

                    b.Property<string>("Health_Facility")
                        .HasColumnType("text")
                        .HasColumnName("Health Facility");

                    b.Property<string>("Mechanism_ID")
                        .HasColumnType("text")
                        .HasColumnName("Mechanism ID");

                    b.Property<string>("Partner")
                        .HasColumnType("text")
                        .HasColumnName("Partner");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasColumnName("Region");

                    b.Property<string>("Report_Date")
                        .HasColumnType("text")
                        .HasColumnName("Report Date");

                    b.Property<string>("Reporting_Month")
                        .HasColumnType("text")
                        .HasColumnName("Reporting Month");

                    b.Property<string>("TB_Detection_Female_0_14")
                        .HasColumnType("text")
                        .HasColumnName("TB Detection Female 0 - 14");

                    b.Property<string>("TB_Detection_Female_15Plus")
                        .HasColumnType("text")
                        .HasColumnName("TB Detection Female 15+");

                    b.Property<string>("TB_Detection_Male_0_14")
                        .HasColumnType("text")
                        .HasColumnName("TB Detection Male 0 - 14");

                    b.Property<string>("TB_Detection_Male_15Plus")
                        .HasColumnType("text")
                        .HasColumnName("TB Detection Male 15+");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UploadBatchGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Upload_Batch")
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .HasColumnType("text")
                        .HasColumnName("Year");

                    b.HasKey("Id");

                    b.ToTable("StagingTBData");
                });

            modelBuilder.Entity("GHPRS.Core.Entities.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<byte[]>("File")
                        .HasColumnType("bytea");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Version")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("GHPRS.Core.Entities.Upload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("File")
                        .HasColumnType("bytea");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UploadBatch")
                        .HasColumnType("text");

                    b.Property<Guid>("UploadBatchGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("UploadStatus")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("Uploads");
                });

            modelBuilder.Entity("GHPRS.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PersonId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GHPRS.Core.Entities.WorkSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Range")
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("WorkSheets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GHPRS.Core.Entities.Column", b =>
                {
                    b.HasOne("GHPRS.Core.Entities.WorkSheet", "WorkSheet")
                        .WithMany("Columns")
                        .HasForeignKey("WorkSheetId");

                    b.Navigation("WorkSheet");
                });

            modelBuilder.Entity("GHPRS.Core.Entities.FileUploads", b =>
                {
                    b.HasOne("GHPRS.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GHPRS.Core.Entities.MerData", b =>
                {
                    b.HasOne("GHPRS.Core.Entities.FileUploads", "FileUploads")
                        .WithMany()
                        .HasForeignKey("FileUploadsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileUploads");
                });

            modelBuilder.Entity("GHPRS.Core.Entities.Upload", b =>
                {
                    b.HasOne("GHPRS.Core.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GHPRS.Core.Entities.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.HasOne("GHPRS.Core.Entities.User", "User")
                        .WithMany("Uploads")
                        .HasForeignKey("UserId");

                    b.Navigation("Organization");

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GHPRS.Core.Entities.User", b =>
                {
                    b.HasOne("GHPRS.Core.Entities.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GHPRS.Core.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GHPRS.Core.Entities.WorkSheet", b =>
                {
                    b.HasOne("GHPRS.Core.Entities.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GHPRS.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GHPRS.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GHPRS.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GHPRS.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GHPRS.Core.Entities.Organization", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("GHPRS.Core.Entities.User", b =>
                {
                    b.Navigation("Uploads");
                });

            modelBuilder.Entity("GHPRS.Core.Entities.WorkSheet", b =>
                {
                    b.Navigation("Columns");
                });
#pragma warning restore 612, 618
        }
    }
}
